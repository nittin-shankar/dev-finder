import Config
import Dotenvy

source!(["config/.#{config_env()}.env", System.get_env()])

# Configuration for development
if config_env() == :dev do
  # Watch static and templates for browser reloading.
  config :dev_finder, DevFinderWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/dev_finder_web/(live|views)/.*(ex)$",
      ~r"lib/dev_finder_web/templates/.*(eex)$"
    ]
  ],
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:default, ~w(--watch)]}
  ],
  check_origin: false,
  code_reloader: true,
  debug_errors: true

  # Do not include metadata nor timestamps in development logs
  config :logger, :console, format: "[$level] $message\n"

  # Set a higher stacktrace during development. Avoid configuring such
  # in production as building large stacktraces may be expensive.
  config :phoenix, :stacktrace_depth, 20

  # Initialize plugs at runtime for faster development compilation
  config :phoenix, :plug_init_mode, :runtime

  # Enable dev routes for dashboard and mailbox
  config :dev_finder, dev_routes: true
end


# config/runtime.exs is executed for all environments, including
# during releases. It is executed after compilation and before the
# system starts, so it is typically used to load production configuration
# and secrets from environment variables or elsewhere. Do not define
# any compile-time configuration in here, as it won't be applied.
# The block below contains prod specific runtime configuration.

# ## Using releases
#
# If you use `mix release`, you need to explicitly enable the server
# by passing the PHX_SERVER=true when you start it:
#
#     PHX_SERVER=true bin/dev_finder start
#
# Alternatively, you can use `mix phx.gen.release` to generate a `bin/server`
# script that automatically sets the env var above.
if env!("PHX_SERVER", :boolean) do
  config :dev_finder, DevFinderWeb.Endpoint, server: true
end

config :dev_finder, DevFinderWeb.Endpoint,
  url: [
    host: env!("PHX_HOST", :string, "example.com"),
    port: env!("PHX_HOST_PORT", :integer, 443),
    scheme: env!("PHX_URL_SCHEME", :string, "https")
    ],
  http: [
    # Enable IPv6 and bind on all interfaces.
    # Set it to  {0, 0, 0, 0, 0, 0, 0, 1} for local network only access.
    # See the documentation on https://hexdocs.pm/plug_cowboy/Plug.Cowboy.html
    # for details about using IPv6 vs IPv4 and loopback vs public addresses.
    ip: env!("PHX_IP", fn ip ->
      ip
      |> String.split(",")
      |> Enum.map(&String.trim/1)
      |> Enum.map(&String.to_integer/1)
      |> List.to_tuple()
    end),
    port: env!("PHX_PORT", :string!, "4000")
  ],
  secret_key_base: env!("SECRET_KEY_BASE", :string!), # The secret key base is used to sign/encrypt cookies and other secrets.

  # Note we also include the path to a cache manifest
  # containing the digested version of static files. This
  # manifest is generated by the `mix phx.digest` task,
  # which you should run after static files are built and
  # before starting your production server.
  cache_static_manifest: env!("CACHE_MANIFEST_URL", :string, false)


# Configuring the github client in developement environment
config :dev_finder, :github_client, env!("GITHUB_CLIENT_MODULE", :module!)

# Configuring github personal access token
config :dev_finder, :github_access_token, env!("GITHUB_ACCESS_TOKEN", :string!)

config :swoosh, :api_client, env!("SWOOSH_API_CLIENT", :module, false)
# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to your endpoint configuration:
#
#     config :dev_finder, DevFinderWeb.Endpoint,
#       https: [
#         ...,
#         port: 443,
#         cipher_suite: :strong,
#         keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#         certfile: System.get_env("SOME_APP_SSL_CERT_PATH")
#       ]
#
# The `cipher_suite` is set to `:strong` to support only the
# latest and more secure SSL ciphers. This means old browsers
# and clients may not be supported. You can set it to
# `:compatible` for wider support.
#
# `:keyfile` and `:certfile` expect an absolute path to the key
# and cert in disk or a relative path inside priv, for example
# "priv/ssl/server.key". For all supported SSL configuration
# options, see https://hexdocs.pm/plug/Plug.SSL.html#configure/1
#
# We also recommend setting `force_ssl` in your endpoint, ensuring
# no data is ever sent via http, always redirecting to https:
#
#     config :dev_finder, DevFinderWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Configuring the mailer
#
# In production you need to configure the mailer to use a different adapter.
# Also, you may need to configure the Swoosh API client of your choice if you
# are not using SMTP. Here is an example of the configuration:
#
#     config :dev_finder, DevFinder.Mailer,
#       adapter: Swoosh.Adapters.Mailgun,
#       api_key: System.get_env("MAILGUN_API_KEY"),
#       domain: System.get_env("MAILGUN_DOMAIN")
#
# For this example you need include a HTTP client required by Swoosh API client.
# Swoosh supports Hackney and Finch out of the box:
#
#     config :swoosh, :api_client, Swoosh.ApiClient.Hackney
#
# See https://hexdocs.pm/swoosh/Swoosh.html#module-installation for details.
